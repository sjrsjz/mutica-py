from .mutica_py import MuticaType, MuticaGC, MuticaEngine, MuticaError
from typing import Callable

__all__ = [
    "MuticaType",
    "MuticaGC",
    "MuticaEngine",
    "MuticaError",
]

class MuticaType:
    @staticmethod
    def integer() -> "MuticaType": ...
    @staticmethod
    def char() -> "MuticaType": ...
    @staticmethod
    def float() -> "MuticaType": ...
    @staticmethod
    def integer_value(value: int) -> "MuticaType": ...
    @staticmethod
    def char_value(value: str) -> "MuticaType": ...
    @staticmethod
    def float_value(value: float) -> "MuticaType": ...
    @staticmethod
    def namespace(tag: str, value: "MuticaType") -> "MuticaType": ...
    @staticmethod
    def tuple(elements: list["MuticaType"]) -> "MuticaType": ...
    @staticmethod
    def top() -> "MuticaType": ...
    @staticmethod
    def bottom() -> "MuticaType": ...
    def as_py(self) -> object: ...
    def fulfill(self, other: "MuticaType") -> bool: ...
    def unwrap_fixpoint(self) -> "MuticaType": ...

class MuticaGC:
    def collect(self) -> None: ...

class MuticaEngine:
    def load(self, expr: str, filepath: str | None, gc: MuticaGC) -> list[str]: ...
    def step(self, gc: MuticaGC) -> bool: ...
    def get_current_type(self) -> MuticaType: ...
    def set_io_handler(
        self, io_handler: Callable[["MuticaType", "MuticaType"], "MuticaType" | None] | None
    ) -> None: ...

class MuticaError:
    @property
    def message(self) -> str: ...
    @property
    def brief(self) -> str: ...
